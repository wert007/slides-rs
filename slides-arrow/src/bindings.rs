// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod arrows {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct TypeIndex {
                pub index: u32,
                pub fixed_unique_key: u32,
            }
            impl ::core::fmt::Debug for TypeIndex {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TypeIndex")
                        .field("index", &self.index)
                        .field("fixed-unique-key", &self.fixed_unique_key)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TypeAllocator {
                handle: _rt::Resource<TypeAllocator>,
            }
            impl TypeAllocator {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for TypeAllocator {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:arrows/types")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]type-allocator"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Clone)]
            pub enum Type {
                Void,
                Color,
                String,
                Int,
                Float,
                Bool,
                Element,
                Dict,
                Enum(_rt::String),
                EnumDefinition((TypeIndex, _rt::Vec<_rt::String>)),
                Struct((_rt::String, _rt::Vec<(_rt::String, TypeIndex)>)),
            }
            impl ::core::fmt::Debug for Type {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Type::Void => f.debug_tuple("Type::Void").finish(),
                        Type::Color => f.debug_tuple("Type::Color").finish(),
                        Type::String => f.debug_tuple("Type::String").finish(),
                        Type::Int => f.debug_tuple("Type::Int").finish(),
                        Type::Float => f.debug_tuple("Type::Float").finish(),
                        Type::Bool => f.debug_tuple("Type::Bool").finish(),
                        Type::Element => f.debug_tuple("Type::Element").finish(),
                        Type::Dict => f.debug_tuple("Type::Dict").finish(),
                        Type::Enum(e) => f.debug_tuple("Type::Enum").field(e).finish(),
                        Type::EnumDefinition(e) => {
                            f.debug_tuple("Type::EnumDefinition").field(e).finish()
                        }
                        Type::Struct(e) => {
                            f.debug_tuple("Type::Struct").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Function {
                pub name: _rt::String,
                pub args: _rt::Vec<TypeIndex>,
                pub result_type: TypeIndex,
            }
            impl ::core::fmt::Debug for Function {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Function")
                        .field("name", &self.name)
                        .field("args", &self.args)
                        .field("result-type", &self.result_type)
                        .finish()
                }
            }
            impl TypeAllocator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn create() -> TypeAllocator {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/types")]
                        unsafe extern "C" {
                            #[link_name = "[static]type-allocator.create"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { TypeAllocator::from_handle(ret as u32) }
                    }
                }
            }
            impl TypeAllocator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn allocate(&self, t: &Type) -> TypeIndex {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let (
                            result11_0,
                            result11_1,
                            result11_2,
                            result11_3,
                            result11_4,
                        ) = match t {
                            Type::Void => {
                                (
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::Color => {
                                (
                                    1i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::String => {
                                (
                                    2i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::Int => {
                                (
                                    3i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::Float => {
                                (
                                    4i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::Bool => {
                                (
                                    5i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::Element => {
                                (
                                    6i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::Dict => {
                                (
                                    7i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::Enum(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    8i32,
                                    ptr0.cast_mut(),
                                    len0,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Type::EnumDefinition(e) => {
                                let (t1_0, t1_1) = e;
                                let TypeIndex {
                                    index: index2,
                                    fixed_unique_key: fixed_unique_key2,
                                } = t1_0;
                                let vec4 = t1_1;
                                let len4 = vec4.len();
                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec4.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result4 = if layout4.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout4);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec4.into_iter().enumerate() {
                                    let base = result4
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len3;
                                        *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                (
                                    9i32,
                                    _rt::as_i32(index2) as *mut u8,
                                    _rt::as_i32(fixed_unique_key2) as usize,
                                    result4,
                                    len4,
                                )
                            }
                            Type::Struct(e) => {
                                let (t5_0, t5_1) = e;
                                let vec6 = t5_0;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                let vec10 = t5_1;
                                let len10 = vec10.len();
                                let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec10.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result10 = if layout10.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout10);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec10.into_iter().enumerate() {
                                    let base = result10
                                        .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let (t7_0, t7_1) = e;
                                        let vec8 = t7_0;
                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                        let len8 = vec8.len();
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len8;
                                        *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                        let TypeIndex {
                                            index: index9,
                                            fixed_unique_key: fixed_unique_key9,
                                        } = t7_1;
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>() = _rt::as_i32(index9);
                                        *base
                                            .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>() = _rt::as_i32(fixed_unique_key9);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result10, layout10)]);
                                (10i32, ptr6.cast_mut(), len6, result10, len10)
                            }
                        };
                        let ptr12 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/types")]
                        unsafe extern "C" {
                            #[link_name = "[method]type-allocator.allocate"]
                            fn wit_import13(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import13(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import13(
                                (self).handle() as i32,
                                result11_0,
                                result11_1,
                                result11_2,
                                result11_3,
                                result11_4,
                                ptr12,
                            )
                        };
                        let l14 = *ptr12.add(0).cast::<i32>();
                        let l15 = *ptr12.add(4).cast::<i32>();
                        let result16 = TypeIndex {
                            index: l14 as u32,
                            fixed_unique_key: l15 as u32,
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result16
                    }
                }
            }
            impl TypeAllocator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self, t: TypeIndex) -> Type {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let TypeIndex {
                            index: index0,
                            fixed_unique_key: fixed_unique_key0,
                        } = t;
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/types")]
                        unsafe extern "C" {
                            #[link_name = "[method]type-allocator.get"]
                            fn wit_import2(_: i32, _: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                _rt::as_i32(index0),
                                _rt::as_i32(fixed_unique_key0),
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let v26 = match l3 {
                            0 => Type::Void,
                            1 => Type::Color,
                            2 => Type::String,
                            3 => Type::Int,
                            4 => Type::Float,
                            5 => Type::Bool,
                            6 => Type::Element,
                            7 => Type::Dict,
                            8 => {
                                let e26 = {
                                    let l4 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        l4.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Type::Enum(e26)
                            }
                            9 => {
                                let e26 = {
                                    let l7 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    let l8 = *ptr1
                                        .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    let l9 = *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l10 = *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base14 = l9;
                                    let len14 = l10;
                                    let mut result14 = _rt::Vec::with_capacity(len14);
                                    for i in 0..len14 {
                                        let base = base14
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e14 = {
                                            let l11 = *base.add(0).cast::<*mut u8>();
                                            let l12 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            _rt::string_lift(bytes13)
                                        };
                                        result14.push(e14);
                                    }
                                    _rt::cabi_dealloc(
                                        base14,
                                        len14 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    (
                                        TypeIndex {
                                            index: l7 as u32,
                                            fixed_unique_key: l8 as u32,
                                        },
                                        result14,
                                    )
                                };
                                Type::EnumDefinition(e26)
                            }
                            n => {
                                debug_assert_eq!(n, 10, "invalid enum discriminant");
                                let e26 = {
                                    let l15 = *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len17 = l16;
                                    let bytes17 = _rt::Vec::from_raw_parts(
                                        l15.cast(),
                                        len17,
                                        len17,
                                    );
                                    let l18 = *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *ptr1
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base25 = l18;
                                    let len25 = l19;
                                    let mut result25 = _rt::Vec::with_capacity(len25);
                                    for i in 0..len25 {
                                        let base = base25
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e25 = {
                                            let l20 = *base.add(0).cast::<*mut u8>();
                                            let l21 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                l20.cast(),
                                                len22,
                                                len22,
                                            );
                                            let l23 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            let l24 = *base
                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            (
                                                _rt::string_lift(bytes22),
                                                TypeIndex {
                                                    index: l23 as u32,
                                                    fixed_unique_key: l24 as u32,
                                                },
                                            )
                                        };
                                        result25.push(e25);
                                    }
                                    _rt::cabi_dealloc(
                                        base25,
                                        len25 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    (_rt::string_lift(bytes17), result25)
                                };
                                Type::Struct(e26)
                            }
                        };
                        let result27 = v26;
                        result27
                    }
                }
            }
            impl TypeAllocator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_by_key(&self, key: u32) -> TypeIndex {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/types")]
                        unsafe extern "C" {
                            #[link_name = "[method]type-allocator.get-by-key"]
                            fn wit_import1(_: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, _rt::as_i32(&key), ptr0)
                        };
                        let l2 = *ptr0.add(0).cast::<i32>();
                        let l3 = *ptr0.add(4).cast::<i32>();
                        let result4 = TypeIndex {
                            index: l2 as u32,
                            fixed_unique_key: l3 as u32,
                        };
                        result4
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod values {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ValueIndex {
                pub index: u32,
            }
            impl ::core::fmt::Debug for ValueIndex {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ValueIndex").field("index", &self.index).finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ValueAllocator {
                handle: _rt::Resource<ValueAllocator>,
            }
            impl ValueAllocator {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for ValueAllocator {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:arrows/values")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]value-allocator"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Clone)]
            pub struct Position {
                pub x: _rt::String,
                pub y: _rt::String,
            }
            impl ::core::fmt::Debug for Position {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Position")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Element {
                pub id: u32,
                pub parent: Option<u32>,
                pub name: _rt::String,
                pub namespace: _rt::String,
            }
            impl ::core::fmt::Debug for Element {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Element")
                        .field("id", &self.id)
                        .field("parent", &self.parent)
                        .field("name", &self.name)
                        .field("namespace", &self.namespace)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum Value {
                Void,
                StringType(_rt::String),
                Int(i64),
                Float(f64),
                StyleUnit(_rt::String),
                Position(Position),
                Dict(_rt::Vec<(_rt::String, ValueIndex)>),
                Array(_rt::Vec<ValueIndex>),
                Element(Element),
            }
            impl ::core::fmt::Debug for Value {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Value::Void => f.debug_tuple("Value::Void").finish(),
                        Value::StringType(e) => {
                            f.debug_tuple("Value::StringType").field(e).finish()
                        }
                        Value::Int(e) => f.debug_tuple("Value::Int").field(e).finish(),
                        Value::Float(e) => {
                            f.debug_tuple("Value::Float").field(e).finish()
                        }
                        Value::StyleUnit(e) => {
                            f.debug_tuple("Value::StyleUnit").field(e).finish()
                        }
                        Value::Position(e) => {
                            f.debug_tuple("Value::Position").field(e).finish()
                        }
                        Value::Dict(e) => f.debug_tuple("Value::Dict").field(e).finish(),
                        Value::Array(e) => {
                            f.debug_tuple("Value::Array").field(e).finish()
                        }
                        Value::Element(e) => {
                            f.debug_tuple("Value::Element").field(e).finish()
                        }
                    }
                }
            }
            impl ValueAllocator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn create() -> ValueAllocator {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/values")]
                        unsafe extern "C" {
                            #[link_name = "[static]value-allocator.create"]
                            fn wit_import0() -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0() -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0() };
                        unsafe { ValueAllocator::from_handle(ret as u32) }
                    }
                }
            }
            impl ValueAllocator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn allocate(&self, value: &Value) -> ValueIndex {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let (
                            result14_0,
                            result14_1,
                            result14_2,
                            result14_3,
                            result14_4,
                            result14_5,
                            result14_6,
                            result14_7,
                        ) = match value {
                            Value::Void => {
                                (
                                    0i32,
                                    ::core::mem::MaybeUninit::<u64>::zeroed(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::StringType(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    1i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                    ::core::ptr::null_mut(),
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::Int(e) => {
                                (
                                    2i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::Float(e) => {
                                (
                                    3i32,
                                    ::core::mem::MaybeUninit::new(
                                        (_rt::as_f64(e)).to_bits() as i64 as u64,
                                    ),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::StyleUnit(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    4i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                    ::core::ptr::null_mut(),
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::Position(e) => {
                                let Position { x: x2, y: y2 } = e;
                                let vec3 = x2;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                let vec4 = y2;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                (
                                    5i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr3.cast_mut());
                                        t
                                    },
                                    len3,
                                    ptr4.cast_mut(),
                                    len4 as *mut u8,
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::Dict(e) => {
                                let vec8 = e;
                                let len8 = vec8.len();
                                let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec8.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result8 = if layout8.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout8);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8
                                        .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let (t5_0, t5_1) = e;
                                        let vec6 = t5_0;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len6;
                                        *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                        let ValueIndex { index: index7 } = t5_1;
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>() = _rt::as_i32(index7);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                (
                                    6i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(result8);
                                        t
                                    },
                                    len8,
                                    ::core::ptr::null_mut(),
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::Array(e) => {
                                let vec9 = e;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                (
                                    7i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr9.cast_mut());
                                        t
                                    },
                                    len9,
                                    ::core::ptr::null_mut(),
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            Value::Element(e) => {
                                let Element {
                                    id: id10,
                                    parent: parent10,
                                    name: name10,
                                    namespace: namespace10,
                                } = e;
                                let (result11_0, result11_1) = match parent10 {
                                    Some(e) => (1i32, _rt::as_i32(e)),
                                    None => (0i32, 0i32),
                                };
                                let vec12 = name10;
                                let ptr12 = vec12.as_ptr().cast::<u8>();
                                let len12 = vec12.len();
                                let vec13 = namespace10;
                                let ptr13 = vec13.as_ptr().cast::<u8>();
                                let len13 = vec13.len();
                                (
                                    8i32,
                                    ::core::mem::MaybeUninit::new(
                                        i64::from(_rt::as_i32(id10)) as u64,
                                    ),
                                    result11_0 as usize,
                                    result11_1 as *mut u8,
                                    ptr12.cast_mut(),
                                    len12,
                                    ptr13.cast_mut(),
                                    len13,
                                )
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/values")]
                        unsafe extern "C" {
                            #[link_name = "[method]value-allocator.allocate"]
                            fn wit_import15(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import15(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import15(
                                (self).handle() as i32,
                                result14_0,
                                result14_1,
                                result14_2,
                                result14_3,
                                result14_4,
                                result14_5,
                                result14_6,
                                result14_7,
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        ValueIndex { index: ret as u32 }
                    }
                }
            }
            impl ValueAllocator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self, value: ValueIndex) -> Value {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 24 + 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 24
                                + 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let ValueIndex { index: index0 } = value;
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/values")]
                        unsafe extern "C" {
                            #[link_name = "[method]value-allocator.get"]
                            fn wit_import2(_: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                _rt::as_i32(index0),
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let v37 = match l3 {
                            0 => Value::Void,
                            1 => {
                                let e37 = {
                                    let l4 = *ptr1.add(8).cast::<*mut u8>();
                                    let l5 = *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        l4.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Value::StringType(e37)
                            }
                            2 => {
                                let e37 = {
                                    let l7 = *ptr1.add(8).cast::<i64>();
                                    l7
                                };
                                Value::Int(e37)
                            }
                            3 => {
                                let e37 = {
                                    let l8 = *ptr1.add(8).cast::<f64>();
                                    l8
                                };
                                Value::Float(e37)
                            }
                            4 => {
                                let e37 = {
                                    let l9 = *ptr1.add(8).cast::<*mut u8>();
                                    let l10 = *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len11 = l10;
                                    let bytes11 = _rt::Vec::from_raw_parts(
                                        l9.cast(),
                                        len11,
                                        len11,
                                    );
                                    _rt::string_lift(bytes11)
                                };
                                Value::StyleUnit(e37)
                            }
                            5 => {
                                let e37 = {
                                    let l12 = *ptr1.add(8).cast::<*mut u8>();
                                    let l13 = *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len14 = l13;
                                    let bytes14 = _rt::Vec::from_raw_parts(
                                        l12.cast(),
                                        len14,
                                        len14,
                                    );
                                    let l15 = *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len17 = l16;
                                    let bytes17 = _rt::Vec::from_raw_parts(
                                        l15.cast(),
                                        len17,
                                        len17,
                                    );
                                    Position {
                                        x: _rt::string_lift(bytes14),
                                        y: _rt::string_lift(bytes17),
                                    }
                                };
                                Value::Position(e37)
                            }
                            6 => {
                                let e37 = {
                                    let l18 = *ptr1.add(8).cast::<*mut u8>();
                                    let l19 = *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base24 = l18;
                                    let len24 = l19;
                                    let mut result24 = _rt::Vec::with_capacity(len24);
                                    for i in 0..len24 {
                                        let base = base24
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        let e24 = {
                                            let l20 = *base.add(0).cast::<*mut u8>();
                                            let l21 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                l20.cast(),
                                                len22,
                                                len22,
                                            );
                                            let l23 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            (
                                                _rt::string_lift(bytes22),
                                                ValueIndex { index: l23 as u32 },
                                            )
                                        };
                                        result24.push(e24);
                                    }
                                    _rt::cabi_dealloc(
                                        base24,
                                        len24 * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result24
                                };
                                Value::Dict(e37)
                            }
                            7 => {
                                let e37 = {
                                    let l25 = *ptr1.add(8).cast::<*mut u8>();
                                    let l26 = *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len27 = l26;
                                    _rt::Vec::from_raw_parts(l25.cast(), len27, len27)
                                };
                                Value::Array(e37)
                            }
                            n => {
                                debug_assert_eq!(n, 8, "invalid enum discriminant");
                                let e37 = {
                                    let l28 = *ptr1.add(8).cast::<i32>();
                                    let l29 = i32::from(*ptr1.add(12).cast::<u8>());
                                    let l31 = *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l32 = *ptr1
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len33 = l32;
                                    let bytes33 = _rt::Vec::from_raw_parts(
                                        l31.cast(),
                                        len33,
                                        len33,
                                    );
                                    let l34 = *ptr1
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l35 = *ptr1
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len36 = l35;
                                    let bytes36 = _rt::Vec::from_raw_parts(
                                        l34.cast(),
                                        len36,
                                        len36,
                                    );
                                    Element {
                                        id: l28 as u32,
                                        parent: match l29 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l30 = *ptr1.add(16).cast::<i32>();
                                                    l30 as u32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        name: _rt::string_lift(bytes33),
                                        namespace: _rt::string_lift(bytes36),
                                    }
                                };
                                Value::Element(e37)
                            }
                        };
                        let result38 = v37;
                        result38
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod slides {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Placement {
                HtmlHead,
                JavascriptInit,
                JavascriptSlideChange,
            }
            impl ::core::fmt::Debug for Placement {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Placement::HtmlHead => {
                            f.debug_tuple("Placement::HtmlHead").finish()
                        }
                        Placement::JavascriptInit => {
                            f.debug_tuple("Placement::JavascriptInit").finish()
                        }
                        Placement::JavascriptSlideChange => {
                            f.debug_tuple("Placement::JavascriptSlideChange").finish()
                        }
                    }
                }
            }
            impl Placement {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Placement {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Placement::HtmlHead,
                        1 => Placement::JavascriptInit,
                        2 => Placement::JavascriptSlideChange,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Slides {
                handle: _rt::Resource<Slides>,
            }
            impl Slides {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Slides {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:arrows/slides")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]slides"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Slides {
                #[allow(unused_unsafe, clippy::all)]
                pub fn download_file(&self, url: &str, path: &str) -> () {
                    unsafe {
                        let vec0 = url;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = path;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/slides")]
                        unsafe extern "C" {
                            #[link_name = "[method]slides.download-file"]
                            fn wit_import2(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1.cast_mut(),
                                len1,
                            )
                        };
                    }
                }
            }
            impl Slides {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_file_reference(&self, path: &str) -> () {
                    unsafe {
                        let vec0 = path;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/slides")]
                        unsafe extern "C" {
                            #[link_name = "[method]slides.add-file-reference"]
                            fn wit_import1(_: i32, _: *mut u8, _: usize);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1((self).handle() as i32, ptr0.cast_mut(), len0)
                        };
                    }
                }
            }
            impl Slides {
                #[allow(unused_unsafe, clippy::all)]
                pub fn place_text_in_output(
                    &self,
                    text: &str,
                    source: &str,
                    placement: Placement,
                ) -> () {
                    unsafe {
                        let vec0 = text;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = source;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:arrows/slides")]
                        unsafe extern "C" {
                            #[link_name = "[method]slides.place-text-in-output"]
                            fn wit_import2(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1.cast_mut(),
                                len1,
                                placement.clone() as i32,
                            )
                        };
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod arrows {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod modules {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Function = super::super::super::super::component::arrows::types::Function;
                pub type TypeAllocator = super::super::super::super::component::arrows::types::TypeAllocator;
                pub type ValueAllocator = super::super::super::super::component::arrows::values::ValueAllocator;
                pub type ValueIndex = super::super::super::super::component::arrows::values::ValueIndex;
                pub type Slides = super::super::super::super::component::arrows::slides::Slides;
                #[derive(Clone)]
                pub enum Error {
                    FunctionNotFound,
                    InvalidType,
                    ArgumentCountMismatch,
                    InternalError(_rt::String),
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Error::FunctionNotFound => {
                                f.debug_tuple("Error::FunctionNotFound").finish()
                            }
                            Error::InvalidType => {
                                f.debug_tuple("Error::InvalidType").finish()
                            }
                            Error::ArgumentCountMismatch => {
                                f.debug_tuple("Error::ArgumentCountMismatch").finish()
                            }
                            Error::InternalError(e) => {
                                f.debug_tuple("Error::InternalError").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for Error {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for Error {}
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Module {
                    handle: _rt::Resource<Module>,
                }
                type _ModuleRep<T> = Option<T>;
                impl Module {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Module`.
                    pub fn new<T: GuestModule>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ModuleRep<T> = Some(val);
                        let ptr: *mut _ModuleRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestModule>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestModule>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestModule>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _ModuleRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestModule>(&self) -> *mut _ModuleRep<T> {
                        Module::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Module`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ModuleBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Module>,
                }
                impl<'a> ModuleBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestModule>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ModuleRep<T> {
                        Module::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Module {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:arrows/modules"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]module"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_module_create_cabi<T: GuestModule>(
                    arg0: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::create(unsafe {
                        super::super::super::super::component::arrows::slides::Slides::from_handle(
                            arg0 as u32,
                        )
                    });
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_module_register_types_cabi<T: GuestModule>(
                    arg0: *mut u8,
                    arg1: i32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::register_types(
                        unsafe { ModuleBorrow::lift(arg0 as u32 as usize) }.get(),
                        unsafe {
                            super::super::super::super::component::arrows::types::TypeAllocator::from_handle(
                                arg1 as u32,
                            )
                        },
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_module_available_functions_cabi<
                    T: GuestModule,
                >(arg0: *mut u8, arg1: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::available_functions(
                        unsafe { ModuleBorrow::lift(arg0 as u32 as usize) }.get(),
                        unsafe {
                            super::super::super::super::component::arrows::types::TypeAllocator::from_handle(
                                arg1 as u32,
                            )
                        },
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec6 = result0;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec6.len() * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6
                            .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::component::arrows::types::Function {
                                name: name2,
                                args: args2,
                                result_type: result_type2,
                            } = e;
                            let vec3 = (name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (args2).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            let super::super::super::super::component::arrows::types::TypeIndex {
                                index: index5,
                                fixed_unique_key: fixed_unique_key5,
                            } = result_type2;
                            *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(index5);
                            *base
                                .add(4 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(fixed_unique_key5);
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len6;
                    *ptr1.add(0).cast::<*mut u8>() = result6;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_module_available_functions<
                    T: GuestModule,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base7 = l0;
                    let len7 = l1;
                    for i in 0..len7 {
                        let base = base7
                            .add(i * (8 + 4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            _rt::cabi_dealloc(base6, len6 * 8, 4);
                        }
                    }
                    _rt::cabi_dealloc(
                        base7,
                        len7 * (8 + 4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_module_call_function_cabi<T: GuestModule>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let len1 = arg6;
                    let result2 = T::call_function(
                        unsafe { ModuleBorrow::lift(arg0 as u32 as usize) }.get(),
                        unsafe {
                            super::super::super::super::component::arrows::slides::Slides::from_handle(
                                arg1 as u32,
                            )
                        },
                        _rt::string_lift(bytes0),
                        unsafe {
                            super::super::super::super::component::arrows::values::ValueAllocator::from_handle(
                                arg4 as u32,
                            )
                        },
                        _rt::Vec::from_raw_parts(arg5.cast(), len1, len1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::component::arrows::values::ValueIndex {
                                index: index4,
                            } = e;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(index4);
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Error::FunctionNotFound => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                Error::InvalidType => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                }
                                Error::ArgumentCountMismatch => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                }
                                Error::InternalError(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_module_call_function<T: GuestModule>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type Module: GuestModule;
                }
                pub trait GuestModule: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:arrows/modules"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]module"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:arrows/modules"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]module"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn create(slides: Slides) -> Module;
                    fn register_types(&self, types: TypeAllocator) -> ();
                    fn available_functions(
                        &self,
                        types: TypeAllocator,
                    ) -> _rt::Vec<Function>;
                    fn call_function(
                        &self,
                        slides: Slides,
                        name: _rt::String,
                        allocator: ValueAllocator,
                        args: _rt::Vec<ValueIndex>,
                    ) -> Result<ValueIndex, Error>;
                }
                #[doc(hidden)]
                macro_rules! __export_component_arrows_modules_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "component:arrows/modules#[static]module.create")] unsafe extern
                        "C" fn export_static_module_create(arg0 : i32,) -> i32 { unsafe {
                        $($path_to_types)*:: _export_static_module_create_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Module > (arg0) } } #[unsafe
                        (export_name =
                        "component:arrows/modules#[method]module.register-types")] unsafe
                        extern "C" fn export_method_module_register_types(arg0 : * mut
                        u8, arg1 : i32,) { unsafe { $($path_to_types)*::
                        _export_method_module_register_types_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Module > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "component:arrows/modules#[method]module.available-functions")]
                        unsafe extern "C" fn
                        export_method_module_available_functions(arg0 : * mut u8, arg1 :
                        i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_module_available_functions_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Module > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_component:arrows/modules#[method]module.available-functions")]
                        unsafe extern "C" fn
                        _post_return_method_module_available_functions(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_method_module_available_functions::<<$ty as
                        $($path_to_types)*:: Guest >::Module > (arg0) } } #[unsafe
                        (export_name =
                        "component:arrows/modules#[method]module.call-function")] unsafe
                        extern "C" fn export_method_module_call_function(arg0 : * mut u8,
                        arg1 : i32, arg2 : * mut u8, arg3 : usize, arg4 : i32, arg5 : *
                        mut u8, arg6 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*::
                        _export_method_module_call_function_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Module > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_component:arrows/modules#[method]module.call-function")]
                        unsafe extern "C" fn
                        _post_return_method_module_call_function(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_module_call_function::<<$ty as
                        $($path_to_types)*:: Guest >::Module > (arg0) } } const _ : () =
                        { #[doc(hidden)] #[unsafe (export_name =
                        "component:arrows/modules#[dtor]module")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Module::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Module > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_arrows_modules_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_host_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::arrows::modules::__export_component_arrows_modules_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::component::arrows::modules);
    };
}
#[doc(inline)]
pub(crate) use __export_host_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:arrows:host:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1976] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xbd\x0e\x01A\x02\x01\
A\x0f\x01B\x17\x01r\x02\x05indexy\x10fixed-unique-keyy\x04\0\x0atype-index\x03\0\
\0\x04\0\x0etype-allocator\x03\x01\x01ps\x01o\x02\x01\x03\x01o\x02s\x01\x01p\x05\
\x01o\x02s\x06\x01q\x0b\x04void\0\0\x05color\0\0\x06string\0\0\x03int\0\0\x05flo\
at\0\0\x04bool\0\0\x07element\0\0\x04dict\0\0\x04enum\x01s\0\x0fenum-definition\x01\
\x04\0\x06struct\x01\x07\0\x04\0\x04type\x03\0\x08\x01p\x01\x01r\x03\x04names\x04\
args\x0a\x0bresult-type\x01\x04\0\x08function\x03\0\x0b\x01i\x02\x01@\0\0\x0d\x04\
\0\x1d[static]type-allocator.create\x01\x0e\x01h\x02\x01@\x02\x04self\x0f\x01t\x09\
\0\x01\x04\0\x1f[method]type-allocator.allocate\x01\x10\x01@\x02\x04self\x0f\x01\
t\x01\0\x09\x04\0\x1a[method]type-allocator.get\x01\x11\x01@\x02\x04self\x0f\x03\
keyy\0\x01\x04\0![method]type-allocator.get-by-key\x01\x12\x03\0\x16component:ar\
rows/types\x05\0\x01B\x15\x01r\x01\x05indexy\x04\0\x0bvalue-index\x03\0\0\x04\0\x0f\
value-allocator\x03\x01\x01r\x02\x01xs\x01ys\x04\0\x08position\x03\0\x03\x01ky\x01\
r\x04\x02idy\x06parent\x05\x04names\x09namespaces\x04\0\x07element\x03\0\x06\x01\
o\x02s\x01\x01p\x08\x01p\x01\x01q\x09\x04void\0\0\x0bstring-type\x01s\0\x03int\x01\
x\0\x05float\x01u\0\x0astyle-unit\x01s\0\x08position\x01\x04\0\x04dict\x01\x09\0\
\x05array\x01\x0a\0\x07element\x01\x07\0\x04\0\x05value\x03\0\x0b\x01i\x02\x01@\0\
\0\x0d\x04\0\x1e[static]value-allocator.create\x01\x0e\x01h\x02\x01@\x02\x04self\
\x0f\x05value\x0c\0\x01\x04\0\x20[method]value-allocator.allocate\x01\x10\x01@\x02\
\x04self\x0f\x05value\x01\0\x0c\x04\0\x1b[method]value-allocator.get\x01\x11\x03\
\0\x17component:arrows/values\x05\x01\x02\x03\0\0\x04type\x01B\x0c\x02\x03\x02\x01\
\x02\x04\0\x04type\x03\0\0\x01m\x03\x09html-head\x0fjavascript-init\x17javascrip\
t-slide-change\x04\0\x09placement\x03\0\x02\x04\0\x06slides\x03\x01\x01h\x04\x01\
@\x03\x04self\x05\x03urls\x04paths\x01\0\x04\0\x1c[method]slides.download-file\x01\
\x06\x01@\x02\x04self\x05\x04paths\x01\0\x04\0![method]slides.add-file-reference\
\x01\x07\x01@\x04\x04self\x05\x04texts\x06sources\x09placement\x03\x01\0\x04\0#[\
method]slides.place-text-in-output\x01\x08\x03\0\x17component:arrows/slides\x05\x03\
\x02\x03\0\0\x08function\x02\x03\0\0\x0etype-allocator\x02\x03\0\x01\x05value\x02\
\x03\0\x01\x0fvalue-allocator\x02\x03\0\x01\x0bvalue-index\x02\x03\0\x02\x06slid\
es\x01B!\x02\x03\x02\x01\x02\x04\0\x04type\x03\0\0\x02\x03\x02\x01\x04\x04\0\x08\
function\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x0etype-allocator\x03\0\x04\x02\x03\
\x02\x01\x06\x04\0\x05value\x03\0\x06\x02\x03\x02\x01\x07\x04\0\x0fvalue-allocat\
or\x03\0\x08\x02\x03\x02\x01\x08\x04\0\x0bvalue-index\x03\0\x0a\x02\x03\x02\x01\x09\
\x04\0\x06slides\x03\0\x0c\x01q\x04\x12function-not-found\0\0\x0cinvalid-type\0\0\
\x17argument-count-mismatch\0\0\x0einternal-error\x01s\0\x04\0\x05error\x03\0\x0e\
\x04\0\x06module\x03\x01\x01i\x0d\x01i\x10\x01@\x01\x06slides\x11\0\x12\x04\0\x15\
[static]module.create\x01\x13\x01h\x10\x01i\x05\x01@\x02\x04self\x14\x05types\x15\
\x01\0\x04\0\x1d[method]module.register-types\x01\x16\x01p\x03\x01@\x02\x04self\x14\
\x05types\x15\0\x17\x04\0\"[method]module.available-functions\x01\x18\x01i\x09\x01\
p\x0b\x01j\x01\x0b\x01\x0f\x01@\x05\x04self\x14\x06slides\x11\x04names\x09alloca\
tor\x19\x04args\x1a\0\x1b\x04\0\x1c[method]module.call-function\x01\x1c\x04\0\x18\
component:arrows/modules\x05\x0a\x04\0\x15component:arrows/host\x04\0\x0b\x0a\x01\
\0\x04host\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070\
.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
