package component:arrows;
interface types {
    record type-index {
        index: u32,
        fixed-unique-key: u32,
    }
    resource type-allocator {
        create: static func() -> type-allocator;
        allocate: func(t: %type) -> type-index;
        get: func(t: type-index) -> %type;
        get-by-key: func(key: u32) -> type-index;
    }


    variant %type {
        void,
        color,
        %string,
        int,
        float,
        %bool,
        element,
        dict,
        %enum(string),
        enum-definition(tuple<type-index, list<string>>),
        struct(tuple<string, list<tuple<string, type-index>>>),
        array(type-index),
        optional(type-index),
    }

    record function {
        name: string,
        args: list<type-index>,
        result-type: type-index,
    }
}

interface values {
    record value-index {
        index: u32,
    }
    resource value-allocator {
        create: static func() -> value-allocator;
        allocate: func(value: value) -> value-index;
        get: func(value: value-index) -> value;
    }

    record position {
        x: string,
        y: string,
    }

    record element {
        id: u32,
        parent: option<u32>,
        name: string,
        namespace: string,
    }

    variant value {
        void,
        string-type(string),
        int(s64),
        float(f64),
        style-unit(string),
        position(position),
        dict(list<tuple<string, value-index>>),
        array(list<value-index>),
        element(element),
    }
}

interface slides {
    use types.{%type};
    enum placement {
        html-head,
        javascript-init,
        javascript-slide-change,
    }

    resource slides {
        download-file: func(url: string, path: string);
        add-file-reference: func(path: string);
        place-text-in-output: func(text: string, source: string, placement: placement);
    }
}

interface modules {
    use types.{%type, function, type-allocator};
    use values.{value, value-allocator, value-index};
    use slides.{slides};

    variant error {
        function-not-found,
        invalid-type,
        argument-count-mismatch,
        internal-error(string),
    }
    resource module {
        create: static func(slides: slides) -> module;
        register-types: func(types: type-allocator);
        available-functions: func(types: type-allocator) -> list<function>;
        call-function: func(slides: slides, name: string, allocator: value-allocator, args: list<value-index>) -> result<value-index, error>;
    }
}

world host {
    export modules;
}
