package component:arrows;
interface types {
    enum %type {
        void,
        %string,
        int,
        float,
    }

    record function {
        name: string,
        args: list<%type>,
        result-type: %type,
    }
}

interface values {
    record value-index {
        index: u32,
    }
    resource value-allocator {
        create: static func() -> value-allocator;
        allocate: func(value: value) -> value-index;
        get: func(value: value-index) -> value;
    }

    record position {
        x: string,
        y: string,
    }

    variant value {
        void,
        string-type(string),
        int(s64),
        float(f64),
        style-unit(string),
        position(position),
        dict(list<tuple<string, value-index>>),
        array(list<value-index>),
    }
}

interface modules {
    use types.{%type, function};
    use values.{value, value-allocator, value-index};

    variant error {
        function-not-found,
    }
    resource module {
        create: static func() -> module;
        available-functions: func() -> list<function>;
        call-function: func(name: string, allocator: value-allocator, args: list<value-index>) -> result<value-index, error>;
    }
}

world host {
    export modules;
}
